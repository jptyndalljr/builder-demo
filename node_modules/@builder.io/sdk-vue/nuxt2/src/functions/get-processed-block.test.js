var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var import_get_processed_block = __toModule(require("./get-processed-block"));
test("Can process bindings", () => {
  var _a, _b, _c, _d, _e, _f;
  const block = {
    "@type": "@builder.io/sdk:Element",
    properties: {
      foo: "bar"
    },
    bindings: {
      "properties.foo": '"baz"',
      "responsiveStyles.large.zIndex": "1 + 1",
      "properties.test": "state.test",
      "properties.block": `
        const foo = 'bar';
        return foo;
      `,
      "properties.isEditing": "builder.isEditing"
    }
  };
  const processed = (0, import_get_processed_block.getProcessedBlock)({
    block,
    context: {},
    state: { test: "hello" }
  });
  expect(processed).not.toEqual(block);
  expect((_a = processed.properties) == null ? void 0 : _a.foo).toEqual("baz");
  expect((_b = processed.properties) == null ? void 0 : _b.test).toEqual("hello");
  expect((_c = processed.properties) == null ? void 0 : _c.block).toEqual("bar");
  expect((_d = processed.properties) == null ? void 0 : _d.isEditing).toEqual(false);
  expect((_f = (_e = processed.responsiveStyles) == null ? void 0 : _e.large) == null ? void 0 : _f.zIndex).toEqual(2);
});
