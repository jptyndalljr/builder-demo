var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  evaluate: () => evaluate
});
var import_is_browser = __toModule(require("./is-browser"));
var import_is_editing = __toModule(require("./is-editing"));
function evaluate({
  code,
  context,
  state,
  event
}) {
  if (code === "") {
    console.warn("Skipping evaluation of empty code block.");
    return;
  }
  const builder = {
    isEditing: (0, import_is_editing.isEditing)(),
    isBrowser: (0, import_is_browser.isBrowser)(),
    isServer: !(0, import_is_browser.isBrowser)()
  };
  const useReturn = !(code.includes(";") || code.includes(" return ") || code.trim().startsWith("return "));
  const useCode = useReturn ? `return (${code});` : code;
  try {
    return new Function("builder", "Builder", "state", "context", "event", useCode)(builder, builder, state, context, event);
  } catch (e) {
    console.warn("Builder custom code error: ", e);
  }
}
