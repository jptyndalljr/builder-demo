var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var import_is_browser = __toModule(require("../functions/is-browser"));
var import_register = __toModule(require("../functions/register"));
var _a;
(0, import_register.register)("insertMenu", {
  name: "_default",
  default: true,
  items: [
    { name: "Box" },
    { name: "Text" },
    { name: "Image" },
    { name: "Columns" },
    ...false ? [] : [
      { name: "Core:Section" },
      { name: "Core:Button" },
      { name: "Embed" },
      { name: "Custom Code" }
    ]
  ]
});
if ((0, import_is_browser.isBrowser)()) {
  (_a = window.parent) == null ? void 0 : _a.postMessage({
    type: "builder.sdkInfo",
    data: {
      target: "vue",
      supportsPatchUpdates: false
    }
  }, "*");
  window.addEventListener("message", ({ data }) => {
    var _a2, _b;
    if (data) {
      switch (data.type) {
        case "builder.evaluate": {
          const text = data.data.text;
          const args = data.data.arguments || [];
          const id = data.data.id;
          const fn = new Function(text);
          let result;
          let error = null;
          try {
            result = fn.apply(null, args);
          } catch (err) {
            error = err;
          }
          if (error) {
            (_a2 = window.parent) == null ? void 0 : _a2.postMessage({
              type: "builder.evaluateError",
              data: { id, error: error.message }
            }, "*");
          } else {
            if (result && typeof result.then === "function") {
              result.then((finalResult) => {
                var _a3;
                (_a3 = window.parent) == null ? void 0 : _a3.postMessage({
                  type: "builder.evaluateResult",
                  data: { id, result: finalResult }
                }, "*");
              }).catch(console.error);
            } else {
              (_b = window.parent) == null ? void 0 : _b.postMessage({
                type: "builder.evaluateResult",
                data: { result, id }
              }, "*");
            }
          }
          break;
        }
      }
    }
  });
}
