var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
__export(exports, {
  generateContentUrl: () => generateContentUrl,
  getAllContent: () => getAllContent,
  getContent: () => getContent
});
var import_get_fetch = __toModule(require("../get-fetch"));
const fetch = (0, import_get_fetch.getFetch)();
function flatten(object, path = null, separator = ".") {
  return Object.keys(object).reduce((acc, key) => {
    const value = object[key];
    const newPath = [path, key].filter(Boolean).join(separator);
    const isObject = [
      typeof value === "object",
      value !== null,
      !(Array.isArray(value) && value.length === 0)
    ].every(Boolean);
    return isObject ? __spreadValues(__spreadValues({}, acc), flatten(value, newPath, separator)) : __spreadProps(__spreadValues({}, acc), { [newPath]: value });
  }, {});
}
function getContent(options) {
  return __async(this, null, function* () {
    return (yield getAllContent(__spreadProps(__spreadValues({}, options), { limit: 1 }))).results[0] || null;
  });
}
const generateContentUrl = (options) => {
  const {
    limit = 1,
    userAttributes,
    query,
    noTraverse = false,
    model,
    apiKey
  } = options;
  const url = new URL(`https://cdn.builder.io/api/v2/content/${model}?apiKey=${apiKey}&limit=${limit}&noTraverse=${noTraverse}`);
  if (options.options) {
    const flattened = flatten(options.options);
    for (const key in flattened) {
      url.searchParams.set(key, String(flattened[key]));
    }
  }
  if (userAttributes) {
    url.searchParams.set("userAttributes", JSON.stringify(userAttributes));
  }
  if (query) {
    const flattened = flatten({ query });
    for (const key in flattened) {
      url.searchParams.set(key, JSON.stringify(flattened[key]));
    }
  }
  return url;
};
const handleABTesting = (content, testGroups) => {
  for (const item of content.results) {
    if (item.variations && Object.keys(item.variations).length) {
      const testGroup = testGroups[item.id];
      const variationValue = item.variations[testGroup];
      if (testGroup && variationValue) {
        item.data = variationValue.data;
        item.testVariationId = variationValue.id;
        item.testVariationName = variationValue.name;
      } else {
        let n = 0;
        const random = Math.random();
        let set = false;
        for (const id in item.variations) {
          const variation = item.variations[id];
          const testRatio = variation.testRatio;
          n += testRatio;
          if (random < n) {
            const variationName = variation.name || (variation.id === item.id ? "Default variation" : "");
            set = true;
            Object.assign(item, {
              data: variation.data,
              testVariationId: variation.id,
              testVariationName: variationName
            });
          }
        }
        if (!set) {
          Object.assign(item, {
            testVariationId: item.id,
            testVariationName: "Default"
          });
        }
      }
    }
  }
};
function getAllContent(options) {
  return __async(this, null, function* () {
    const url = generateContentUrl(options);
    const content = yield fetch(url.href).then((res) => res.json());
    if (options.testGroups) {
      handleABTesting(content, options.testGroups);
    }
    return content;
  });
}
