var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
__export(exports, {
  onChange: () => onChange,
  onChangeProxySymbol: () => onChangeProxySymbol
});
const onChangeProxySymbol = Symbol("onChangeProxySymbol");
function onChange(obj, cb) {
  return new Proxy(obj, {
    get(target, key) {
      if (key === onChangeProxySymbol) {
        return true;
      }
      const value = Reflect.get(target, key);
      if (value && typeof value === "object") {
        if (value[onChangeProxySymbol]) {
          return value;
        }
        return onChange(value, cb);
      }
      return value;
    },
    set(target, key, value) {
      const returnValue = Reflect.set(target, key, value);
      cb();
      return returnValue;
    }
  });
}
